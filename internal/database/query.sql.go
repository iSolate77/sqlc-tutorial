// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const associateBookWithAuthor = `-- name: AssociateBookWithAuthor :exec
INSERT INTO book_authors (book_id, author_id) VALUES ($1, $2)
`

type AssociateBookWithAuthorParams struct {
	BookID   int32
	AuthorID int32
}

func (q *Queries) AssociateBookWithAuthor(ctx context.Context, arg AssociateBookWithAuthorParams) error {
	_, err := q.db.Exec(ctx, associateBookWithAuthor, arg.BookID, arg.AuthorID)
	return err
}

const createAuthor = `-- name: CreateAuthor :one
INSERT INTO authors (name, bio) VALUES ($1, $2) RETURNING id, name, bio
`

type CreateAuthorParams struct {
	Name string
	Bio  pgtype.Text
}

func (q *Queries) CreateAuthor(ctx context.Context, arg CreateAuthorParams) (Author, error) {
	row := q.db.QueryRow(ctx, createAuthor, arg.Name, arg.Bio)
	var i Author
	err := row.Scan(&i.ID, &i.Name, &i.Bio)
	return i, err
}

const createBook = `-- name: CreateBook :one
INSERT INTO books (title, year) VALUES ($1, $2) RETURNING id, title, author, year
`

type CreateBookParams struct {
	Title string
	Year  pgtype.Int4
}

func (q *Queries) CreateBook(ctx context.Context, arg CreateBookParams) (Book, error) {
	row := q.db.QueryRow(ctx, createBook, arg.Title, arg.Year)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Author,
		&i.Year,
	)
	return i, err
}

const deleteAuthor = `-- name: DeleteAuthor :one
DELETE FROM authors WHERE id = $1 RETURNING id, name, bio
`

func (q *Queries) DeleteAuthor(ctx context.Context, id int32) (Author, error) {
	row := q.db.QueryRow(ctx, deleteAuthor, id)
	var i Author
	err := row.Scan(&i.ID, &i.Name, &i.Bio)
	return i, err
}

const deleteBook = `-- name: DeleteBook :one
DELETE FROM books WHERE id = $1 RETURNING id, title, author, year
`

func (q *Queries) DeleteBook(ctx context.Context, id int32) (Book, error) {
	row := q.db.QueryRow(ctx, deleteBook, id)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Author,
		&i.Year,
	)
	return i, err
}

const getAuthor = `-- name: GetAuthor :one
SELECT id, name, bio FROM authors WHERE id = $1
`

func (q *Queries) GetAuthor(ctx context.Context, id int32) (Author, error) {
	row := q.db.QueryRow(ctx, getAuthor, id)
	var i Author
	err := row.Scan(&i.ID, &i.Name, &i.Bio)
	return i, err
}

const getAuthors = `-- name: GetAuthors :many
SELECT id, name, bio FROM authors
`

func (q *Queries) GetAuthors(ctx context.Context) ([]Author, error) {
	rows, err := q.db.Query(ctx, getAuthors)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Author
	for rows.Next() {
		var i Author
		if err := rows.Scan(&i.ID, &i.Name, &i.Bio); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBook = `-- name: GetBook :one
SELECT id, title, author, year FROM books WHERE id = $1
`

func (q *Queries) GetBook(ctx context.Context, id int32) (Book, error) {
	row := q.db.QueryRow(ctx, getBook, id)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Author,
		&i.Year,
	)
	return i, err
}

const getBookByTitleAndYear = `-- name: GetBookByTitleAndYear :one
SELECT id, title, author, year FROM books WHERE title = $1 AND year = $2
`

type GetBookByTitleAndYearParams struct {
	Title string
	Year  pgtype.Int4
}

func (q *Queries) GetBookByTitleAndYear(ctx context.Context, arg GetBookByTitleAndYearParams) (Book, error) {
	row := q.db.QueryRow(ctx, getBookByTitleAndYear, arg.Title, arg.Year)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Author,
		&i.Year,
	)
	return i, err
}

const getBooksByAuthor = `-- name: GetBooksByAuthor :many
SELECT b.id, b.title, b.author, b.year FROM books b
JOIN book_authors ba ON b.id = ba.book_id
WHERE ba.author_id = $1
`

func (q *Queries) GetBooksByAuthor(ctx context.Context, authorID int32) ([]Book, error) {
	rows, err := q.db.Query(ctx, getBooksByAuthor, authorID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Book
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Author,
			&i.Year,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBooksByAuthorAndTitle = `-- name: GetBooksByAuthorAndTitle :many
SELECT b.id, b.title, b.author, b.year FROM books b
JOIN book_authors ba ON b.id = ba.book_id
WHERE ba.author_id = $1 AND b.title = $2
`

type GetBooksByAuthorAndTitleParams struct {
	AuthorID int32
	Title    string
}

func (q *Queries) GetBooksByAuthorAndTitle(ctx context.Context, arg GetBooksByAuthorAndTitleParams) ([]Book, error) {
	rows, err := q.db.Query(ctx, getBooksByAuthorAndTitle, arg.AuthorID, arg.Title)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Book
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Author,
			&i.Year,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBooksByAuthorAndTitleAndYear = `-- name: GetBooksByAuthorAndTitleAndYear :many
SELECT b.id, b.title, b.author, b.year FROM books b
JOIN book_authors ba ON b.id = ba.book_id
WHERE ba.author_id = $1 AND b.title = $2 AND b.year = $3
`

type GetBooksByAuthorAndTitleAndYearParams struct {
	AuthorID int32
	Title    string
	Year     pgtype.Int4
}

func (q *Queries) GetBooksByAuthorAndTitleAndYear(ctx context.Context, arg GetBooksByAuthorAndTitleAndYearParams) ([]Book, error) {
	rows, err := q.db.Query(ctx, getBooksByAuthorAndTitleAndYear, arg.AuthorID, arg.Title, arg.Year)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Book
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Author,
			&i.Year,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBooksByAuthorAndYear = `-- name: GetBooksByAuthorAndYear :many
SELECT b.id, b.title, b.author, b.year FROM books b
JOIN book_authors ba ON b.id = ba.book_id
WHERE ba.author_id = $1 AND b.year = $2
`

type GetBooksByAuthorAndYearParams struct {
	AuthorID int32
	Year     pgtype.Int4
}

func (q *Queries) GetBooksByAuthorAndYear(ctx context.Context, arg GetBooksByAuthorAndYearParams) ([]Book, error) {
	rows, err := q.db.Query(ctx, getBooksByAuthorAndYear, arg.AuthorID, arg.Year)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Book
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Author,
			&i.Year,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBooksByTitle = `-- name: GetBooksByTitle :many
SELECT id, title, author, year FROM books WHERE title = $1
`

func (q *Queries) GetBooksByTitle(ctx context.Context, title string) ([]Book, error) {
	rows, err := q.db.Query(ctx, getBooksByTitle, title)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Book
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Author,
			&i.Year,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAuthor = `-- name: UpdateAuthor :one
UPDATE authors SET name = $1, bio = $2 WHERE id = $3 RETURNING id, name, bio
`

type UpdateAuthorParams struct {
	Name string
	Bio  pgtype.Text
	ID   int32
}

func (q *Queries) UpdateAuthor(ctx context.Context, arg UpdateAuthorParams) (Author, error) {
	row := q.db.QueryRow(ctx, updateAuthor, arg.Name, arg.Bio, arg.ID)
	var i Author
	err := row.Scan(&i.ID, &i.Name, &i.Bio)
	return i, err
}

const updateBook = `-- name: UpdateBook :one
UPDATE books SET title = $1, year = $2 WHERE id = $3 RETURNING id, title, author, year
`

type UpdateBookParams struct {
	Title string
	Year  pgtype.Int4
	ID    int32
}

func (q *Queries) UpdateBook(ctx context.Context, arg UpdateBookParams) (Book, error) {
	row := q.db.QueryRow(ctx, updateBook, arg.Title, arg.Year, arg.ID)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Author,
		&i.Year,
	)
	return i, err
}
